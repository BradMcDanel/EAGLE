#!/usr/bin/env python3
"""Summarize MT-Bench log files for throughput and acceptance statistics."""

from __future__ import annotations

import argparse
import json
import re
from pathlib import Path
from typing import Dict, Optional, Tuple


def parse_metrics(path: Path) -> Tuple[Optional[float], Optional[float]]:
    mean_throughput = None
    accept_ratio = None
    with path.open() as fh:
        for line in fh:
            if "Mean throughput:" in line:
                matches = re.findall(r"([0-9]+\.?[0-9]*)", line)
                if matches:
                    mean_throughput = float(matches[0])
            elif "Mean acceptance ratio:" in line:
                matches = re.findall(r"([0-9]+\.?[0-9]*)", line)
                if matches:
                    accept_ratio = float(matches[0])
    return mean_throughput, accept_ratio


def summarize_logs(log_dir: Path) -> None:
    baseline: Dict[str, float] = {}
    rows = []

    for log_path in sorted(log_dir.glob("*.log")):
        mean_tp, accept = parse_metrics(log_path)
        name = log_path.stem
        if name.endswith("_baseline"):
            key = name[:-len("_baseline")]
            if mean_tp is not None:
                baseline[key] = mean_tp
        else:
            if mean_tp is not None:
                rows.append((name, mean_tp, accept))

    print("\nSummary (Mean throughput in tokens/s):")
    print(f"{'Run':<35}{'Throughput':>12}{'Accept':>12}{'Speedup vs Baseline':>20}")

    for name, mean_tp, accept in sorted(rows):
        base_key = name.split("_eagle")[0]
        base_tp = baseline.get(base_key)
        speedup = mean_tp / base_tp if base_tp else None
        speedup_str = f"{speedup:.2f}x" if speedup else "n/a"
        accept_str = f"{accept:.2f}" if accept is not None else "-"
        print(f"{name:<35}{mean_tp:>12.2f}{accept_str:>12}{speedup_str:>20}")

    print("\nBaseline throughput:")
    for key, tp in sorted(baseline.items()):
        print(f"  {key:<20} {tp:.2f} tokens/s")


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Summarize MT-Bench logs generated by run_mt_bench_suite.sh")
    parser.add_argument(
        "--log-dir",
        type=Path,
        default=Path("results/mt_bench/logs"),
        help="Directory that contains MT-Bench run logs (default: results/mt_bench/logs)",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    summarize_logs(args.log_dir)


if __name__ == "__main__":
    main()
